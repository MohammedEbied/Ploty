version: 2

jobs:
  # Core
  "python-2.7-core":
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py27-core'
          no_output_timeout: 20m

  "python-3.4-core":
    docker:
      - image: circleci/python:3.4-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_34: python3.4

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py34-core'
          no_output_timeout: 20m

  "python-3.5-core":
    docker:
      - image: circleci/python:3.5-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_35: python3.5

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py35-core'
          no_output_timeout: 20m

  "python-3.6-core":
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_36: python3.6

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py36-core'
          no_output_timeout: 20m

  "python-3.7-core":
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py37-core'
          no_output_timeout: 20m

  # Optional
  "python-2.7-optional":
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Install npm dependencies
          command: cd plotly/tests/test_optional/test_jupyter && npm install
          no_output_timeout: 20m
      - run:
          name: Test with tox
          command: 'tox -e py27-optional'
          no_output_timeout: 20m

  "python-3.4-optional":
    docker:
      - image: circleci/python:3.4-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_34: python3.4

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Install npm dependencies
          command: cd plotly/tests/test_optional/test_jupyter && npm install
          no_output_timeout: 20m
      - run:
          name: Test with tox
          command: 'tox -e py34-optional'
          no_output_timeout: 20m

  "python-3.5-optional":
    docker:
      - image: circleci/python:3.5-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_35: python3.5

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Install npm dependencies
          command: cd plotly/tests/test_optional/test_jupyter && npm install
          no_output_timeout: 20m
      - run:
          name: Test with tox
          command: 'tox -e py35-optional'
          no_output_timeout: 20m

  "python-3.6-optional":
    docker:
      - image: circleci/python:3.6-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_36: python3.6

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Install npm dependencies
          command: cd plotly/tests/test_optional/test_jupyter && npm install
          no_output_timeout: 20m
      - run:
          name: Test with tox
          command: 'tox -e py36-optional'
          no_output_timeout: 20m

  "python-3.7-optional":
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Install npm dependencies
          command: cd plotly/tests/test_optional/test_jupyter && npm install
          no_output_timeout: 20m
      - run:
          name: Test with tox
          command: 'tox -e py37-optional'
          no_output_timeout: 20m

  # Plot.ly
  "python-2.7-plot_ly":
    docker:
      - image: circleci/python:2.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_27: python2.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py27-plot_ly'
          no_output_timeout: 20m

  "python-3.4-plot_ly":
    docker:
      - image: circleci/python:3.4-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_34: python3.4

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py34-plot_ly'
          no_output_timeout: 20m

  "python-3.7-plot_ly":
    docker:
      - image: circleci/python:3.7-stretch-node-browsers
        environment:
          PLOTLY_TOX_PYTHON_37: python3.7

    steps:
      - checkout
      - run:
          name: Install tox
          command: 'sudo pip install tox'
      - run:
          name: Test with tox
          command: 'tox -e py37-plot_ly'
          no_output_timeout: 20m

  "python-2-7-orca":
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 2.7

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-27-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-27-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --disable-warnings plotly/tests/test_core
            pytest plotly/tests/test_orca

      - store_artifacts:
            path: plotly/tests/test_orca/images/linux/failed

  "python-3-5-orca":
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 3.5

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-35-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-35-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --disable-warnings plotly/tests/test_core
            pytest plotly/tests/test_orca

      - store_artifacts:
            path: plotly/tests/test_orca/images/linux/failed

  "python-3-7-orca":
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 3.7

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda-37-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/create_conda_optional_env.sh

      - save_cache:
          key: conda-37-v1-{{ checksum ".circleci/create_conda_optional_env.sh" }}
          paths:
            - /home/circleci/miniconda/
      - run:
          name: Run Tests
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate circle_optional
            pytest --disable-warnings plotly/tests/test_core
            pytest plotly/tests/test_orca

      - store_artifacts:
            path: plotly/tests/test_orca/images/linux/failed


  "python-3-7-conda":
    docker:
      - image: circleci/node:10.9-stretch-browsers
        environment:
          PYTHON_VERSION: 3.7

    steps:
      - checkout
      - restore_cache:
          keys:
            - conda_and_build-v1{{ checksum ".circleci/install_miniconda_and_build_.sh" }}
      - run:
          name: Create conda environment
          command: .circleci/install_miniconda_and_build_.sh

      - save_cache:
          key: conda_and_build-v1{{ checksum ".circleci/install_miniconda_and_build_.sh" }}
          paths:
            - /home/circleci/miniconda/

      - run:
          name: Build conda package
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate
            conda build --python $PYTHON_VERSION recipe/
      - run:
          name: Convert package
          command: |
            . /home/circleci/miniconda/etc/profile.d/conda.sh
            conda activate
            mkdir -p ./conda_packages/linux-64/
            mv /home/circleci/miniconda/conda-bld/linux-64/plotly-*.tar.bz2 ./conda_packages_${PYTHON_VERSION}/linux-64/
            conda convert -p linux-32 conda_packages/linux-64/plotly-*.tar.bz2 -o ./conda_packages_${PYTHON_VERSION}/
            conda convert -p osx-64 conda_packages/linux-64/plotly-*.tar.bz2 -o ./conda_packages_${PYTHON_VERSION}/
            conda convert -p win-64 conda_packages/linux-64/plotly-*.tar.bz2 -o ./conda_packages_${PYTHON_VERSION}/
            conda convert -p win-32 conda_packages/linux-64/plotly-*.tar.bz2 -o ./conda_packages_${PYTHON_VERSION}/

      - run:
          name: Zip up packages
          command: |
            mkdir artifacts
            zip -r artifacts/conda_packages_${PYTHON_VERSION}.zip ./conda_packages_${PYTHON_VERSION}/

      - store_artifacts:
          path: artifacts


workflows:
  version: 2
  build:
    jobs:
#      - "python-2.7-core"
#      - "python-3.4-core"
#      - "python-3.5-core"
#      - "python-3.6-core"
#      - "python-3.7-core"
#      - "python-2.7-optional"
#      - "python-3.4-optional"
#      - "python-3.5-optional"
#      - "python-3.6-optional"
#      # 3.7 optional disabled due to current shapely incompatibility
#      # - "python-3.7-optional"
#      - "python-2.7-plot_ly"
#      - "python-3.4-plot_ly"
#      - "python-3.7-plot_ly"
#      - "python-2-7-orca"
#      - "python-3-5-orca"
#      - "python-3-7-orca"
      - "python-3-7-conda"
